def create_colored_calendar():

    for color in range(24):
        calendar = {
            'summary': color + 1,
            'timeZone': 'Pacific/Auckland',
            'colorId' : color + 1
        }

        created_calendar = service.calendars().insert(body=calendar).execute()


    # create the parser for the function create_colored_calendar
    create_colored_calendar_parser = subparsers.add_parser('create_colored_calendar')
    create_colored_calendar_parser.set_defaults(function = create_colored_calendar)

    

def get_periods_for_line(term, line):
    periods_for_line = []
    all_periods = get_all_periods_in_primary_calendar()
    teaching_dates_and_day_number = get_teaching_dates_and_day_number(term)
    for teaching_date, day_number in teaching_dates_and_day_number:
        periods_for_teaching_date = []
        for period in all_periods:
            # get the 5 periods for that teaching_date
            start_datetime = iso8601.parse_date(period['start']['dateTime'])
            start_date = start_datetime.date()
            if start_date == teaching_date:
                periods_for_teaching_date.append(period)
        assert len(periods_for_teaching_date) == 5 # check
        # we have the 5 periods (events in the calendar) for the teaching date
        period_for_line = utils.get_period_for_line(day_number, line)
        if period_for_line is None:
            pass # do nothing as there is no period on that day that covers the line
        else:
            for period in periods_for_teaching_date:
                if period['summary'].endswith(str(period_for_line)):
                    periods_for_line.append(period)
                    break

    periods_for_line.sort(key=lambda e: iso8601.parse_date(e['start']['dateTime']))
    return periods_for_line


    # create the parser for the get_periods_for_line
    get_periods_for_line_parser = subparsers.add_parser('get_periods_for_line')
    get_periods_for_line_parser.add_argument('term', type=int, choices = [1, 2, 3, 4])
    get_periods_for_line_parser.add_argument('line', type=int, choices = [1, 2, 3, 4, 5, 6])
    get_periods_for_line_parser.set_defaults(function = get_periods_for_line)
